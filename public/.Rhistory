dedup(iris$Species)
library(dm)
dedup(iris$Species)
system.time(32)
system.time(unique(iris$Species))
system.time(dedup(iris$Species))
system.time(unique(iris))
system.time(dedup(iris))
dup_rows(iris$Species)
dup_rows(iris)
dup_nrow(iris)
dup_mark(iris)
x <- sample(1:10, 5, replace = TRUE)
y <- sample(1:10, 5, replace = TRUE)
differ2(x, y)
set.seed(1)
x <- sample(1:10, 5, replace = TRUE)
y <- sample(1:10, 5, replace = TRUE)
differ2(x, y)
x <- sample(1:10, 5, replace = TRUE)
y <- sample(1:10, 5, replace = TRUE)
differ2(x, y)
x <- sample(1:10, 5, replace = TRUE)
y <- sample(1:10, 5, replace = TRUE)
differ2(x, y)
x <- sample(1:10, 5, replace = TRUE)
y <- sample(1:10, 5, replace = TRUE)
differ2(x, y)
x <- 1:5
y <- c(1, 6, 3, 8, 5)
differ2(x, y)
x <- 1:5
y <- c(1, 6, 3, 8, 5)
z <- differ2(x, y)
cbind(x, y, z)
expected(2, 'character')
keep(mtcars, between(mpg, 18, 21))
parity(mtcars$carb)
is.even(1)
is.even(mtcars$carb)
is.odd(2)
is.odd(mtcars$carb)
get_odd(mtcars$carb)
get_even(mtcars$carb)
NAvl0(airquality$Ozone)
mtcars$am
recode(mtcars$am, 0:1, 2:3)
mtcars$am
recode(mtcars$am, 0:1, 2:3)
?match
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE)
output <- xi$nv
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
mtcars$am
recode(mtcars$am, 0:1, 2:3)
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE)
output <- xi$nv
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
recode(mtcars$am, 0:1, 2:3)
mtcars$am
recode(mtcars$am, 0:1, 2:3)
initial = 0:1
initial
new = 2:3
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE)
m
keys
x
x <- mtcars$am
x
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE)
m
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE)
output <- m$nv
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
m
?merge
#' @rdname recode
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE, sort = FALSE)
output <- m$nv
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
m
#' @rdname recode
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE, sort = FALSE)
output <- m$nv
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys, by = 'iv', all.x = TRUE, sort = FALSE)
m
#' @rdname recode
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
output <- ifelse(x == initial, new, initial)
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
source('~/MEGA/Personal/Scripts/R/dm/git/dm/R/recode.R', echo=TRUE)
#' @rdname recode
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys,
by    = 'iv',
all.x = TRUE,
sort  = FALSE)
output <- m$nv
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
#' @rdname recode
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(iv = x)
m <- merge(xi, keys,
by    = 'iv',
all.x = TRUE,
sort  = FALSE)
m <- m[, union(names(xi), names(keys))]
output <- m$nvp
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
plyr::join
swap(iris$Species, setosa = 1, versicolor = 2, virginica = 3)
swap(iris$Species, setosa = 1, versicolor = 2, virginica = 3)
roxygen2::roxygenise()
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(id = 1:length(x),
iv = x)
m <- merge(xi, keys,
by    = 'iv',
all.x = TRUE,
sort  = FALSE)
output <- m$nv
output
m
m[order(m$id)]
m[order(m$id),]
#' @rdname recode
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1) {
output <- replace(x, x %in% initial, new)
} else if (length(initial) == length(new)) {
keys <- data.frame(iv = initial, nv = new)
xi <- data.frame(id = 1:length(x),
iv = x)
m <- merge(xi, keys,
by    = 'iv',
all.x = TRUE,
sort  = FALSE)
output <- m$nv[order(m$id)]
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
mtcars$am
recode(mtcars$am, 0:1, 2:3)
devtools::install_github('robertschnitman/dm')
library(dm)
recode
mtcars$am
recode(mtcars$am, 0:1, 2:3)
stopif(2 < 3)
stopif(2 < 3, 'This is a custom message! STOP!')
type_class(mtcars)
tc(mtcars)
type(mtcars)

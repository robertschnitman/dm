?bookdown::bookdown_site
k <- 1:100
between <- function(x, low, high, inclusive = TRUE)  { # SQL's between clause is inclusive (see link below).
# https://www.w3schools.com/sql/sql_between.asp
if (inclusive == TRUE) {
x >= low & x <= high
} else {
x > low & x < high # Literal "between".
}
}
between(k, 5, 24)
subset(mtcars, between(mpg, 20, 22))
subset(mtcars, between(mpg, 19, 22, inclusive = FALSE))
subset(mtcars, between(mpg, 19, 21, inclusive = FALSE))
subset(mtcars, between(mpg, 18, 21, inclusive = FALSE))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
if (class(x) != expect) {
stop(paste0('Class "', expect, '" expected. Received class ', class(x), '.'))
}
source('~/MEGA/Personal/Scripts/R/dm/git/dm/R/expected.R', echo=TRUE)
expected <- function(x, expect) {
# GOAL: Stop a function from executing if a specific class is not expected.
# (INPUT, OUTPUT) = (any, 1-element vector)
if (class(x) != expect) {
stop(paste0('Class "', expect, '" expected. Received class ', class(x), '.'))
}
}
expected(2, "character")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
numNA <- function(x, m = NULL) {
# a la` Stata's egen rowmiss().
lenna <- function(y) length(y[is.na(y)])
if (is.null(m)) {
output <- lenna(x)
} else {
output <- apply(x, m, lenna)
}
output
}
#' @rdname rowNA
rowNA <- function(x) numNA(x, 1)
#' @rdname colNA
colNA <- function(x) numNA(x, 2)
rowNA(airquality)
colNA(airquality)
numNA(airquality)
roxygen2::roxygenise()
roxygen2::roxygenise()
recode <- function(x, initial, new) {
# assumes initial/new are in the appropriate order.
# Users may want to replace a set of values with a single element.
if (length(new) == 1 | length(initial) == length(new)) {
output <- replace(x, x %in% initial, new)
} else {
li <- length(initial)
ln <- length(new)
ltest <- paste0('Length of the initial set is ', li, ' and the length of the new values is ', ln, '. ')
lcond <- 'Length of replacement vector must be either 1 or the same as the original.'
stop(paste0(ltest, lcond))
}
output
}
recode(mtcars$am, 0:1, 2:3)
switchv(mtcars$am, `0` = 'a', `1` = 'b')
switchv <- function(x, ...) {
if (!is.vector(x)) {
stop(paste0('Vector expected. Received ', class(x), '.'))
} # For nth-dimensional data, use switchv within the appropriate functionals.
codes <- function(z) switch(z, ...)
output <- sapply(x, codes)
output
}
switchv(mtcars$am, `0` = 'a', `1` = 'b')
NAvl(airquality$Ozone, 0)
with(airquality, NAvl(Ozone, mean(Ozone)))
with(airquality, NAvl(Ozone, mean(Ozone, na.rm = TRUE)))
str(airquality)
str(iris)
unique(iris$Species)
switchv(iris$Species, setosa = 1, versicolor = 2, virginica = 3)
switchv <- function(x, ...) {
codes <- function(z) switch(z, ...)
output <- sapply(x, codes)
output
}
switchv(iris$Species, setosa = 1, versicolor = 2, virginica = 3)
warnings()
roxygen2::roxygenise()
warnings()
roxygen2::roxygenise()
stopif <- function(cond, msg = 'Stop condition met.', ...) {
if (cond) stop(msg, ...)
}
stopif(2 < 3)
type <- typeof # yep.
type_class <- function(x) c(type = type(x), class = class(x)) # Know type and class simultaneously.
tc <- type_class # shortcut
type(mtcars)
type_class(mtcars)
tc(mtcars)
roxygen2::roxygenise()
devtools::install_github('robertschnitman/dm')
?dm::recode
?dm
dm::library.dynam.unload()
dm::library.dynam.unload
:?dm::library.dynam.unload
?dm::library.dynam.unload
?numNA
?load_libraries
load_libraries(c('tidyverse', 'ggformula', 'abind'))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
mtcars$am
recode(mtcars$am, 0:1, 2:3)
library(dm)
mtcars$am
recode(mtcars$am, 0:1, 2:3)
#' Fill in a vector's missing values while maintaining proportions
#'
#' @description Fill in missing values in a vector while maintaining proportions. Useful for state reporting.
#'
#' @usage fill(x)
#'
#' @param x A vector.
#'
#' @details
#'
#' @example set.seed(1)
#' k <- c(0, 1, NA, 1, 0, NA, NA, NA)
#'
#'fill_k <- fill(k)
#'
#'cbind(k, fill_k)
#'
#'table(fill_k)
#'
#' @seealso \url{https://github.com/robertschnitman/dm}
fill <- function(x) {
# x should be a vector.
stopifnot(is.vector(x))
# Parameters for sample() for easier reference.
## Proportions should be based on unique values in X
unique_x <- unique(na.omit(x))
## For easier referencing of the NA values and their length.
x_na     <- is.na(x) # To detect where the NAs are.
len_x_na <- length(x_na) # For the "size" input of sample().
## sample()'s prob should be set to the pre-existing proportions.
props    <- prop.table(table(x))
# OUTPUT = the existing dataset where the initial NAs are replaced
#  with the unique values of x while maintaining proportions.
x[x_na]  <- sample(unique_x,len_x_na, replace = TRUE, prob = props)
x
}
k <- c(0, 1, NA, 1, 0, NA, NA, NA)
fill_k <- fill(k)
cbind(k, fill_k)
table(fill_k)
set.seed(1)
k <- c(0, 1, NA, 1, 0, NA, NA, NA)
fill_k <- fill(k)
cbind(k, fill_k)
table(fill_k)
set.seed(2)
fill_k <- fill(k)
table(fill_k)
roxygen2::roxygenise()
k <- c(0, 1, NA, 1, 0, NA, NA, NA)
fill_k <- fill(k)
cbind(k, fill_k)
table(fill_k)
table(k)
# Always set the seed before using randomizing functions.
set.seed(1)
# Our vector to fill in.
k <- c(0, 1, NA, 1, 0, NA, NA, NA)
# Original proportions
prop_original <- prop.table(table(k))
prop_original
# Apply fill() function
fill_k <- fill(k) # A warning may occur
# Compare original vector to the new vector.
cbind(k, fill_k)
# Check if proportions were maintained
prop_new <- prop.table(table(fill_k))
prop_new
all(prop_original == prop_new)
install_github('robertschnitman/dm')
if (!require(devools)) {
install.packages('devtools')
library(devtools)
}
install_github('robertschnitman/dm')
install.packages("devtools")
if (!require(devtools)) {
install.packages('devtools')
library(devtools)
}
install_github('robertschnitman/dm')
dm::fill
dm::fill
